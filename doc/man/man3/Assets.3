.TH "Assets" 3 "Mon Apr 22 2019" "Version 1.1" "Timberman" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Assets
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <assets\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBAssets\fP ()"
.br
.ti -1c
.RI "\fB~Assets\fP ()"
.br
.ti -1c
.RI "void \fBinit\fP ()"
.br
.RI "Function to initializes textures and positions for this class\&. "
.ti -1c
.RI "void \fBupdate\fP (sf::Time &dt)"
.br
.RI "Function to update chopped log based on it's side and sets branch position based on it's side\&. "
.ti -1c
.RI "void \fBupdate_branches\fP (int seed)"
.br
.RI "Function to update branch position on the tree\&. "
.ti -1c
.RI "void \fBdraw\fP (sf::RenderWindow &window)"
.br
.RI "Function to draw everything to the screen\&. "
.ti -1c
.RI "void \fBhandle_input\fP (\fBPlayer\fP &player, \fBText\fP &text, sf::Event &event)"
.br
.RI "Function to update log, score and branches based on input\&. "
.ti -1c
.RI "sf::FloatRect \fBget_branch_bounds\fP ()"
.br
.RI "Function for getting bounds of the lowest branch\&. "
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 88 of file assets\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Assets::Assets ()"

.PP
Definition at line 3 of file assets\&.cc\&.
.PP
.nf
3 {}
.fi
.SS "Assets::~Assets ()"

.PP
Definition at line 5 of file assets\&.cc\&.
.PP
.nf
5 {}
.fi
.SH "Member Function Documentation"
.PP 
.SS "void Assets::draw (sf::RenderWindow & window)"

.PP
Function to draw everything to the screen\&. 
.PP
\fBParameters:\fP
.RS 4
\fIwindow\fP Drawable window 
.RE
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.PP
Definition at line 101 of file assets\&.cc\&.
.PP
References BRANCH_COUNT, and TREE_COUNT\&.
.PP
Referenced by Game::render()\&.
.PP
.nf
101                                         {
102     window\&.draw(m_bg);
103     for(int i = 0; i < TREE_COUNT; i++)   
104         window\&.draw(m_tree_u[i]);
105     
106     window\&.draw(m_tree_b);
107 
108     for(int i = 0; i < BRANCH_COUNT; i++)
109         window\&.draw(m_branches[i]);
110     
111     if(m_log_active)
112         window\&.draw(m_log);
113 }
.fi
.SS "sf::FloatRect Assets::get_branch_bounds ()"

.PP
Function for getting bounds of the lowest branch\&. 
.PP
\fBReturns:\fP
.RS 4
'Rectangle' with global coordinates 
.RE
.PP

.PP
Definition at line 136 of file assets\&.cc\&.
.PP
References BRANCH_COUNT\&.
.PP
Referenced by Player::update()\&.
.PP
.nf
136                                       {
137     return(m_branches[BRANCH_COUNT - 1]\&.getGlobalBounds());
138 }
.fi
.SS "void Assets::handle_input (\fBPlayer\fP & player, \fBText\fP & text, sf::Event & event)"

.PP
Function to update log, score and branches based on input\&. 
.PP
\fBParameters:\fP
.RS 4
\fIplayer\fP \fBPlayer\fP class by reference for getting the score 
.br
\fItext\fP \fBText\fP class by reference for updating score text 
.br
\fIevent\fP Event class by reference for getting the current event 
.RE
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.PP
Definition at line 81 of file assets\&.cc\&.
.PP
References Text::add(), Player::get_score(), LEFT, RIGHT, and update_branches()\&.
.PP
Referenced by Game::handle_events()\&.
.PP
.nf
81                                                                     {
82     if(event\&.type == sf::Event::KeyPressed) {
83         text\&.add("Score: " + std::to_string(player\&.get_score()));
84         if(event\&.key\&.code == sf::Keyboard::Left && m_input && !m_log_active) {
85             m_log_active = true;
86             m_log_side = side::LEFT;
87             this->update_branches(player\&.get_score());
88         }
89         else if(event\&.key\&.code == sf::Keyboard::Right && m_input && !m_log_active) {
90             m_log_side = side::RIGHT;
91             m_log_active = true;
92             this->update_branches(player\&.get_score());
93         }
94         m_input = false;
95     }
96     
97     if(event\&.type == sf::Event::KeyReleased)
98         m_input = true;
99 }
.fi
.SS "void Assets::init ()"

.PP
Function to initializes textures and positions for this class\&. 
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.PP
Definition at line 7 of file assets\&.cc\&.
.PP
References LOG_DEFAULT_X, LOG_DEFAULT_Y, LOG_SCALE_H, LOG_SCALE_W, NONE, OUT_OF_VIEW, TREE_COUNT, TREE_DEFAULT_Y, TREE_POS_STUMP, TREE_POS_X, and TREE_SIZE_STUMP\&.
.PP
Referenced by Game::Game()\&.
.PP
.nf
7                   {
8     m_bg_t\&.loadFromFile("assets/bg\&.png");
9     m_tree_t\&.loadFromFile("assets/tree_upper\&.png");
10     m_tree_bt\&.loadFromFile("assets/tree_base\&.png");
11     m_log_t\&.loadFromFile("assets/log\&.png");
12     m_branch_t\&.loadFromFile("assets/branch\&.png");
13     m_bg\&.setTexture(m_bg_t);
14     m_bg\&.setPosition(0, 0);
15     
16     for(int i = 0; i < TREE_COUNT; i++) {
17         m_tree_u[i]\&.setTexture(m_tree_t);
18 
19         if(i == 0)
20             m_tree_u[i]\&.setPosition(TREE_POS_X, TREE_DEFAULT_Y);
21         else
22             m_tree_u[i]\&.setPosition(TREE_POS_X, m_tree_u[i-1]\&.getPosition()\&.y - TREE_SIZE_STUMP);
23         
24         m_branches[i]\&.setTexture(m_branch_t);
25         m_branches[i]\&.setPosition(OUT_OF_VIEW, OUT_OF_VIEW);
26         m_branch_position[i] = side::NONE;
27     }
28     
29     m_tree_b\&.setTexture(m_tree_bt);
30     m_tree_b\&.setPosition(TREE_POS_X, TREE_POS_STUMP);
31 
32     m_log\&.setTexture(m_log_t);
33     m_log\&.setPosition(LOG_DEFAULT_X, LOG_DEFAULT_Y);
34     m_log\&.setScale({LOG_SCALE_W, LOG_SCALE_H});
35     m_log_active = false;
36     m_input = true;
37 }
.fi
.SS "void Assets::update (sf::Time & dt)"

.PP
Function to update chopped log based on it's side and sets branch position based on it's side\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdt\fP Calculated delta time 
.RE
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.PP
Definition at line 39 of file assets\&.cc\&.
.PP
References BRANCH_ORIGIN_LEFT_X, BRANCH_ORIGIN_LEFT_Y, BRANCH_ORIGIN_RIGHT_X, BRANCH_ORIGIN_RIGHT_Y, BRANCH_POS_GAP, BRANCH_POS_LEFT_X, BRANCH_POS_RIGHT_X, LEFT, LOG_DEFAULT_X, LOG_DEFAULT_Y, LOG_MAX_X, LOG_MIN_X, LOG_SPEED_X, LOG_SPEED_Y, OUT_OF_VIEW, and RIGHT\&.
.PP
Referenced by Game::update()\&.
.PP
.nf
39                               {
40     if(m_log_active) {
41         if(m_log_side == side::LEFT) {
42             // if log side is left, shoot to right
43             m_log\&.setPosition(m_log\&.getPosition()\&.x + (LOG_SPEED_X * dt\&.asSeconds()),
44                               m_log\&.getPosition()\&.y + (LOG_SPEED_Y * dt\&.asSeconds()));
45         }
46         else if(m_log_side == side::RIGHT) {
47             // if log side is right, shoot to left
48             m_log\&.setPosition(m_log\&.getPosition()\&.x + (-LOG_SPEED_X * dt\&.asSeconds()),
49                               m_log\&.getPosition()\&.y + (LOG_SPEED_Y * dt\&.asSeconds()));
50         }
51 
52         if(m_log\&.getPosition()\&.x < LOG_MIN_X ||
53            m_log\&.getPosition()\&.x > LOG_MAX_X) {
54             // log gets out of view, reset to default
55             m_log_active = false;
56             m_log\&.setPosition(LOG_DEFAULT_X, LOG_DEFAULT_Y);
57         }
58     }
59     
60     for(int i = 0; i < 6; i++) {
61         float height = i * BRANCH_POS_GAP;
62 
63         if(m_branch_position[i] == side::LEFT) {
64             // move the sprite to left
65             m_branches[i]\&.setPosition(BRANCH_POS_LEFT_X, height);
66             m_branches[i]\&.setOrigin(BRANCH_ORIGIN_LEFT_X, BRANCH_ORIGIN_LEFT_Y);
67             m_branches[i]\&.setRotation(0);
68         }
69         else if(m_branch_position[i] == side::RIGHT) {
70             // move the sprite to right
71             m_branches[i]\&.setPosition(BRANCH_POS_RIGHT_X, height);
72 
73             m_branches[i]\&.setOrigin(BRANCH_ORIGIN_RIGHT_X, BRANCH_ORIGIN_RIGHT_Y);
74             m_branches[i]\&.setRotation(180);
75         }
76         else
77             m_branches[i]\&.setPosition(OUT_OF_VIEW, height); // if side::none, set out of view
78     }
79 }
.fi
.SS "void Assets::update_branches (int seed)"

.PP
Function to update branch position on the tree\&. 
.PP
\fBParameters:\fP
.RS 4
\fIseed\fP Integer number for seeding (player's score) 
.RE
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.PP
Definition at line 115 of file assets\&.cc\&.
.PP
References BRANCH_COUNT, LEFT, NONE, and RIGHT\&.
.PP
Referenced by handle_input()\&.
.PP
.nf
115                                      {    
116     // moving all branches down one
117     for(int i = BRANCH_COUNT; i > 0; i--) 
118         m_branch_position[i] = m_branch_position[i - 1];
119 
120     // spawn a new branch at position 0
121     // left right or none
122     srand((int)time(0) + seed);
123     int r = (rand() % 15);
124 
125     if(r > 0 && r <= 5) {
126         m_branch_position[0] = side::LEFT;
127     }
128     else if(r > 5 && r <= 10) {
129         m_branch_position[0] = side::RIGHT;
130     }
131     else {
132         m_branch_position[0] = side::NONE;
133     }
134 }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Timberman from the source code\&.
